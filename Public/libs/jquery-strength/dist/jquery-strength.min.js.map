{"version":3,"sources":["jquery-strength.es.js"],"names":["global","factory","define","amd","exports","require","mod","jQuery","PasswordStrength","jqueryStrengthEs","this","_jquery","_password_strength","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_jquery2","_password_strength2","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","DEFAULTS","namespace","skin","showMeter","showToggle","usernameField","templates","toggle","meter","score","main","classes","container","status","input","shown","scoreLables","empty","invalid","weak","good","strong","scoreClasses","emptyStatus","scoreCallback","statusCallback","Strength","element","options","arguments","undefined","$element","extend","data","$username","trigger","init","value","createHtml","addClass","$toggle","$container","find","$meter","$score","$input","bindEvents","initialized","_this","is","on","bind","check","NAMESPACE$1","e","api","html","newClass","oldClass","removeClass","current","old","getStatusClass","replace","output","generateToggle","generateMeter","generateScore","before","$holder","el","detach","remove","isFunction","call","username","val","password","test","type","attr","eventType","_len","params","Array","_key","concat","onFunction","word","substring","toUpperCase","apply"],"mappings":"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","file":"jquery-strength.min.js","sourcesContent":["/**\n* jQuery strength v0.2.5\n* https://github.com/amazingSurge/jquery-strength\n*\n* Copyright (c) amazingSurge\n* Released under the LGPL-3.0 license\n*/\nimport $ from 'jquery';\nimport PasswordStrength from 'password_strength';\n\nvar DEFAULTS = {\n  namespace: 'strength',\n  skin: null,\n\n  showMeter: true,\n  showToggle: true,\n\n  usernameField: '',\n\n  templates: {\n    toggle: '<span class=\"input-group-addon\"><input type=\"checkbox\" class=\"{toggleClass}\" title=\"Show/Hide Password\" /></span>',\n    meter: '<div class=\"{meterClass}\">{score}</div>',\n    score: '<span class=\"label {scoreClass}\"></span>',\n    main: '<div class=\"{containerClass}\"><div class=\"input-group\">{input}{toggle}</div>{meter}</div>'\n  },\n\n  classes: {\n    container: 'strength-container',\n    status: 'strength-{status}',\n    input: 'strength-input',\n    toggle: 'strength-toggle',\n    meter: 'strength-meter',\n    score: 'strength-score',\n    shown: 'strength-shown'\n  },\n\n  scoreLables: {\n    empty: 'Empty',\n    invalid: 'Invalid',\n    weak: 'Weak',\n    good: 'Good',\n    strong: 'Strong'\n  },\n\n  scoreClasses: {\n    empty: '',\n    invalid: 'label-danger',\n    weak: 'label-warning',\n    good: 'label-info',\n    strong: 'label-success'\n  },\n\n  emptyStatus: true,\n\n  scoreCallback: null,\n  statusCallback: null\n};\n\nconst NAMESPACE$1 = 'strength';\n\n/**\n * Plugin constructor\n **/\nclass Strength {\n  constructor(element, options = {}) {\n    this.element = element;\n    this.$element = $(element);\n\n    this.options = $.extend(true, {}, DEFAULTS, options, this.$element.data());\n    this.classes = this.options.classes;\n\n    this.$username = $(this.options.usernameField);\n\n    this.score = 0;\n    this.status = null;\n\n    this.shown = false;\n\n    this.trigger('init');\n    this.init();\n  }\n\n  init() {\n    this.createHtml();\n\n    this.$element.addClass(this.classes.input);\n\n    this.$toggle = this.$container.find(`.${this.classes.toggle}`);\n    this.$meter = this.$container.find(`.${this.classes.meter}`);\n\n    this.$score = this.$container.find(`.${this.classes.score}`);\n    this.$input = this.$container.find(`.${this.classes.input}`);\n\n    this.bindEvents();\n\n    this.initialized = true;\n    this.trigger('ready');\n  }\n\n  bindEvents() {\n    if(this.$toggle.is(':checkbox')){\n      this.$toggle.on('change', () => {\n        this.toggle();\n      });\n    } else {\n      this.$toggle.on('click', () => {\n        this.toggle();\n      });\n    }\n\n\n    this.$input.bind('keyup.strength keydown.strength', () => {\n      this.check();\n    });\n\n    this.$element.on(`${NAMESPACE$1}::check`, (e, api, score, status) => {\n      this.$score.html(this.options.scoreLables[status]);\n\n      if (status !== this.status) {\n        const newClass = this.options.scoreClasses[status];\n        const oldClass = this.options.scoreClasses[this.status];\n        this.$score.removeClass(oldClass).addClass(newClass);\n\n        this.trigger('statusChange', status, this.status);\n      }\n\n      this.status = status;\n      this.score = score;\n    });\n\n    this.$element.on(`${NAMESPACE$1}::statusChange`, (e, api, current, old) => {\n      this.$container.removeClass(this.getStatusClass(old)).addClass(this.getStatusClass(current));\n    });\n  }\n\n  getStatusClass(status) {\n    return this.options.classes.status.replace('{status}', status);\n  }\n\n  createHtml() {\n    let output = this.options.templates.main;\n\n    output = output.replace('{containerClass}', this.classes.container);\n    output = output.replace('{toggle}', this.generateToggle());\n    output = output.replace('{meter}', this.generateMeter());\n    output = output.replace('{score}', this.generateScore());\n    output = output.replace('{input}', `<div class=\"${this.classes.input}\"></div>`);\n    this.$container = $(output);\n\n    if (this.options.skin) {\n      this.$container.addClass(this.options.skin);\n    }\n\n    this.$element.before(this.$container);\n    const $holder = this.$container.find(`.${this.classes.input}`);\n    const el = this.$element.detach();\n    $holder.before(el);\n    $holder.remove();\n  }\n\n  generateToggle() {\n    if (this.options.showToggle) {\n      let output = this.options.templates.toggle;\n\n      output = output.replace('{toggleClass}', this.classes.toggle);\n      return output;\n    }\n    return '';\n  }\n\n  generateMeter() {\n    if (this.options.showMeter) {\n      let output = this.options.templates.meter;\n\n      output = output.replace('{meterClass}', this.classes.meter);\n      return output;\n    }\n    return '';\n  }\n\n  generateScore() {\n    let output = this.options.templates.score;\n\n    output = output.replace('{scoreClass}', this.classes.score);\n    return output;\n  }\n\n  check() {\n    let score = 0;\n    let status = null;\n\n    if ($.isFunction(this.options.scoreCallback)) {\n      score = this.options.scoreCallback.call(this);\n\n      if ($.isFunction(this.options.statusCallback)) {\n        status = this.options.statusCallback.call(this, score);\n      }\n    } else {\n      const check = new PasswordStrength();\n      check.username = this.$username.val() || null;\n      check.password = this.$input.val();\n\n      score = check.test();\n      status = check.status;\n    }\n\n    if (this.options.emptyStatus && status !== 'invalid' && this.$input.val() === '') {\n      status = 'empty';\n    }\n\n    this.trigger('check', score, status);\n  }\n\n  getScore() {\n    if (!this.score) {\n      this.check();\n    }\n    return this.score;\n  }\n\n  getStatus() {\n    if (!this.status) {\n      this.check();\n    }\n    return this.status;\n  }\n\n  toggle() {\n    let type;\n\n    if(this.$toggle.is(':checkbox')) {\n      type = this.$toggle.is(\":checked\")? \"text\" : \"password\";\n    } else {\n      type = this.shown === false?\"text\" : \"password\";\n    }\n\n    this.shown = type === \"text\";\n\n    if(this.shown) {\n      this.$container.addClass(this.classes.shown);\n    } else {\n      this.$container.removeClass(this.classes.shown);\n    }\n    this.$input.attr('type', type);\n\n    this.trigger('toggle', type);\n  }\n\n  trigger(eventType, ...params) {\n    let data = [this].concat(params);\n\n    // event\n    this.$element.trigger(`${NAMESPACE$1}::${eventType}`, data);\n\n    // callback\n    eventType = eventType.replace(/\\b\\w+\\b/g, (word) => {\n      return word.substring(0, 1).toUpperCase() + word.substring(1);\n    });\n    let onFunction = `on${eventType}`;\n\n    if (typeof this.options[onFunction] === 'function') {\n      this.options[onFunction].apply(this, params);\n    }\n  }\n\n  destroy() {\n    this.$element.data(NAMESPACE$1, null);\n    this.trigger('destroy');\n  }\n\n  static setDefaults(options) {\n    $.extend(true, DEFAULTS, $.isPlainObject(options) && options);\n  }\n}\n\nvar info = {\n  version:'0.2.5'\n};\n\nconst NAMESPACE = 'strength';\nconst OtherStrength = $.fn.strength;\n\nconst jQueryStrength = function(options, ...args) {\n  if (typeof options === 'string') {\n    const method = options;\n\n    if (/^_/.test(method)) {\n      return false;\n    } else if ((/^(get)/.test(method))) {\n      const instance = this.first().data(NAMESPACE);\n      if (instance && typeof instance[method] === 'function') {\n        return instance[method](...args);\n      }\n    } else {\n      return this.each(function() {\n        const instance = $.data(this, NAMESPACE);\n        if (instance && typeof instance[method] === 'function') {\n          instance[method](...args);\n        }\n      });\n    }\n  }\n\n  return this.each(function() {\n    if (!$(this).data(NAMESPACE)) {\n      $(this).data(NAMESPACE, new Strength(this, options));\n    }\n  });\n};\n\n$.fn.strength = jQueryStrength;\n\n$.strength = $.extend({\n  setDefaults: Strength.setDefaults,\n  noConflict: function() {\n    $.fn.strength = OtherStrength;\n    return jQueryStrength;\n  }\n}, info);\n"]}